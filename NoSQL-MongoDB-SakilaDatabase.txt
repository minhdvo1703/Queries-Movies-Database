 //Minh Vo
 //MSCA31012 - Assignment 7
 
 //1. Return the total number of customers living in California
  db.customers.find({District:"California"}).count()
  
 //2. Return the total number of customers living in California
 db.films.find(
     { "Rating":"NC-17" },
     { "Title":1, "Rating":1 }
 ).sort({ "Title":1 })
 
 //3. List the movie titles and the count of actors in each movie, sorted alphabetically by title
 db.films.aggregate({ 
    $project: {
        "Title": 1,
        countActors: {$size: "$Actors"}
    }
 }).sort({ "Title":1 })
  
 //4. List the count of movies by category.  Return the category and the count, sorted by the count per category descending.
 db.films.aggregate([
    { $group: { 
         _id: "$Category",
         count: {$sum: 1}}},
    { $sort: {count:-1}}
 ])
 
 //5. List the top 2 movies with movie length greater than 25mins or which has commentaries as special features.  
 //Return the movie title, length, and special features.
 db.films.aggregate([
    { $project: {"Title":1, "Length":1, "Special Features":1}},
    { $match: {$or: [{ "Length": {'$gt':25} },
                     { "Special Features":/.Commentaries./ }]}},
    { $sort: {"Length": -1} },
    { $limit: 2 },
])
 
 //6. List top 10 countries with the most number of customers.
 db.customers.aggregate([
    { $group: { 
         _id: "$Country",
         count: {$sum: 1} }},
    { $sort: {count: -1} },
    { $limit: 10}
 ])
 
 //7. List all replacement costs along with count for each replacement cost.
 db.films.aggregate([
    { $group: { 
         _id: "$Replacement Cost",
         count: {$sum: 1}}}
    { $sort: {count:-1}}
 ])
 
 //8. List all films relating to Mexico for a Cinco de Mayo promotion special.
 db.films.find({Description: {$regex: 'Mexico'}})
 
 //10. Calculate revenue for the Month of August 2005.
 db.customers.aggregate([
  { $unwind: "$Rentals" },
  { $unwind: "$Rentals.Payments" },
  { $match: {'Rentals.Payments.Payment Date': /2005-08/ } },
    {
         $group: { _id: null, sum: { $sum: "$Rentals.Payments.Amount" }
    }
])
 
 //11. Find movies with the highest number of Actors.
  db.films.aggregate(
    {$project: {
        "Title": 1,
        "Count Actors": {$size: "$Actors"}
    }},
    { $sort: {"Count Actors": -1} },
    { $limit: 1 }
 )
 
 //12. List top Movie rating that is rented the most / popular among the customers.
 db.customers.aggregate([
    { $unwind: "$Rentals"},
    { $lookup: {
        from: "films",
        localField: "Rentals.filmId",
        foreignField: "_id",
        as: "films"
    } },
    { $group: {
        _id: "$films.Rating",
        count: {$sum: 1}
    } }
 ]).sort({"count": -1}).limit(1)
 
 //13. List number of actors who worked in each category of films.
 db.films.aggregate([
    { $group: { 
         _id: "$Category",
         "Count Actors": {$sum: {$size: "$Actors"}}}}
    { $sort: {"Count Actors":-1}}
 ])
 
 //14. Find the average length of movies in each category.
  db.films.aggregate([
    { $group: { 
         _id: "$Category",
         avgLength: {$avg: {$toInt: "$Length"} }}}
 ])

 //15. List the customers with at least 40 rentals.
 db.customers.aggregate( 
    { $project: {
        "First Name": 1,
        "Last Name": 1,
        "countRentals": {$size: "$Rentals"}}
    },
    {$match: {"countRentals": {$gte: 40}}}
)
 